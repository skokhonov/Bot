import logging
import subprocess
import os
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
)
from telegram.ext import filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ üìπ –≤–∏–¥–µ–æ ‚Äî —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ –∫—Ä—É–∂–æ–∫. –Ø –æ–±—Ä–µ–∂—É –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ –±—É–¥–µ—Ç –¥–ª–∏–Ω–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥."
    )

async def video_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    message = update.message

    video_file = None
    input_file = None
    output_file = None

    if message.video:
        video_file = message.video
    elif message.document and message.document.mime_type.startswith('video/'):
        video_file = message.document

    if not video_file:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∞–π–ª–∞
    max_input_size = 20 * 1024 * 1024  # 20 –ú–ë
    if video_file.file_size > max_input_size:
        await update.message.reply_text("–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
        return

    # **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**
    await update.message.reply_text("–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –±—É–∫–≤–∞–ª—å–Ω–æ –º–∏–Ω—É—Ç—É!")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        video = await video_file.get_file()
        input_file = f"{video.file_id}.mp4"
        output_file = f"circle_{video.file_id}.mp4"
        await video.download_to_drive(input_file)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg
        command = [
            'ffmpeg', '-y', '-i', input_file,
            '-t', '60',  # –û–±—Ä–µ–∑–∞–µ—Ç –≤–∏–¥–µ–æ –¥–æ 60 —Å–µ–∫—É–Ω–¥
            '-vf', 'crop=min(iw\\,ih):min(iw\\,ih),scale=640:640',
            '-codec:a', 'aac', '-b:a', '128k',  # –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ
            '-codec:v', 'libx264', '-preset', 'slow', '-crf', '20',  # –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
            output_file
        ]
        subprocess.run(command, check=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_file_size = os.path.getsize(output_file)
        max_output_size = 50 * 1024 * 1024  # 50 –ú–ë

        if output_file_size > max_output_size:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫–∞–∫ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ—á–µ–∫)
        with open(output_file, 'rb') as video_note:
            await context.bot.send_video_note(
                chat_id=update.effective_chat.id,
                video_note=video_note
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
        await update.message.reply_text(
            "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ –∫–∏–Ω–æ, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª [–¢–µ–ª–µ–∂–∫–∞ –ö–∏–Ω–æ–º–∞–Ω–æ–≤](https://t.me/staskinoman)",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.")

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
        if input_file and os.path.exists(input_file):
            os.remove(input_file)
        if output_file and os.path.exists(output_file):
            os.remove(output_file)

def main():
    TOKEN = '7256463262:AAFAJgwmiH6dFPf-dNHDIMLq-u5LWJLETqg'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

    application = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –≤–∏–¥–µ–æ
    video_filter = filters.VIDEO | filters.Document.VIDEO
    application.add_handler(MessageHandler(video_filter, video_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
